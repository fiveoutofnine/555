# We initialize `data` to bitpack the mileage data together where the day #
# corresponds to the bit position. Since we only have granularity to the 0.01th
# of a kilometer, we record 100 times the mileage in kilometers. Since there are
# many (178) runs greater than 20.47km ((2**11 - 1) / 100), but only 1 run is
# greater than 40.95km ((2**12 - 1) / 100), it is efficient to reserve 12 bits
# for each run. The only day that exceeds 40.95km is day 375, which recorded
# 50.02km. We can handle this as an edge case when retrieving.
data = 0

mileage_string = """15.96
24.03
15.80
10.61
19.56
18.33
16.19
25.00
13.31
15.84
16.24
17.21
18.73
20.36
21.13
20.63
17.29
17.77
16.43
18.38
14.01
22.91
15.01
18.31
13.67
19.55
35.16
17.20
18.02
16.02
20.87
15.40
32.17
17.01
15.67
19.01
13.42
14.69
12.19
10.37
15.78
15.47
10.04
16.01
29.07
22.07
21.50
20.74
10.01
22.91
12.87
18.78
23.45
27.38
21.49
18.93
10.82
26.66
11.05
21.21
7.57
12.45
12.73
17.46
13.03
14.05
14.41
20.41
13.07
12.00
29.32
25.30
16.57
12.64
5.96
21.92
19.53
19.39
5.96
30.69
10.39
18.53
22.55
21.63
8.74
13.02
24.27
24.30
14.53
5.01
22.88
10.38
21.42
8.83
21.88
10.03
19.48
14.04
18.76
8.07
22.87
26.18
16.01
7.17
10.23
36.70
9.34
25.68
13.48
9.00
10.00
14.74
26.04
8.63
38.22
10.55
16.07
10.54
8.79
16.33
12.65
30.70
12.32
20.07
15.51
11.74
2.74
20.65
13.00
18.02
19.16
16.26
15.73
12.52
24.24
7.31
18.29
9.30
21.19
8.60
12.49
6.63
9.73
30.87
10.55
13.20
20.78
11.40
8.00
10.81
32.23
23.51
25.58
18.97
16.88
26.91
18.01
16.83
13.31
13.80
6.47
25.14
17.72
19.41
16.43
9.10
14.36
6.88
14.71
13.46
14.50
14.52
18.56
18.64
20.03
9.64
15.36
16.02
19.25
15.68
21.59
18.69
9.88
8.88
10.67
11.07
16.52
15.57
16.60
13.01
21.93
5.84
24.50
12.19
8.06
20.16
12.68
21.76
17.07
15.52
14.90
18.50
19.18
22.02
19.32
12.13
11.69
11.34
18.58
19.21
20.00
18.62
17.45
18.25
10.03
6.68
9.28
20.28
19.33
16.73
21.11
15.45
10.49
10.38
18.80
10.76
10.47
7.16
14.12
21.11
19.64
21.23
18.46
30.13
18.68
18.92
14.74
18.29
11.50
12.80
18.59
10.02
7.43
13.66
15.01
18.62
14.75
7.49
22.26
10.46
21.66
32.34
21.24
30.97
22.58
25.59
22.71
6.57
13.01
19.91
21.11
13.93
17.26
7.17
15.12
10.49
15.83
10.06
19.53
20.04
21.68
21.10
18.58
10.63
19.66
9.97
11.50
16.25
13.48
11.29
4.83
16.43
11.37
20.96
13.00
19.07
9.87
12.01
22.56
11.45
13.31
19.39
10.04
15.81
24.04
12.24
22.33
19.41
19.90
22.10
16.23
19.13
15.82
15.38
10.45
20.79
18.35
28.58
9.51
18.04
14.00
20.20
23.18
10.86
18.84
24.60
11.03
19.88
17.64
21.10
15.42
18.49
12.22
19.80
14.53
12.66
19.52
17.99
15.51
27.14
17.18
18.29
11.24
11.14
9.39
30.02
13.32
18.34
30.65
14.74
6.69
21.10
11.55
16.02
16.39
15.35
13.01
13.27
27.37
22.67
20.13
10.27
19.01
17.15
12.23
12.08
18.32
12.02
26.03
16.17
19.97
16.62
20.68
13.90
15.74
20.18
15.03
19.55
16.31
10.04
30.38
22.78
31.01
19.04
50.02
20.88
10.43
12.43
25.01
13.79
19.37
13.53
19.02
17.01
28.21
20.01
16.50
13.64
32.40
13.03
13.39
19.34
10.78
18.29
18.34
16.81
20.45
14.66
20.08
15.02
19.43
20.57
19.51
15.21
22.73
20.80
15.44
17.48
21.91
12.10
27.50
22.61
29.22
25.11
16.72
23.22
28.40
19.71
23.00
22.11
21.06
30.22
17.40
21.34
17.01
22.98
20.41
20.96
20.72
23.24
16.24
17.86
17.78
32.23
18.95
19.12
19.02
16.27
22.06
19.30
26.42
18.65
22.77
19.07
21.17
21.10
20.82
30.63
20.63
19.32
17.35
20.88
22.39
26.14
24.26
23.58
16.68
10.06
28.19
13.22
23.78
21.52
21.85
22.27
18.16
16.27
21.20
33.40
21.66
22.02
17.77
15.23
19.31
18.93
19.50
22.01
20.76
19.75
24.37
17.77
18.14
19.40
21.06
22.58
14.59
13.35
18.56
14.64
17.82
21.42
21.95
17.00
26.45
23.33
20.24
18.21
21.12
19.61
21.62
23.03
21.51
22.19
20.14
21.64
21.32
20.33
20.05
10.53
32.30
19.24
20.73
16.29
18.02
20.83
18.21
20.42
18.28
21.15
19.36
19.03
23.66
14.51
21.62
26.36
22.31
26.82
22.68
23.25
21.41
15.20
25.80
20.17
17.48
30.59
18.11
23.46
25.82
23.66
23.41
27.46
25.15
24.49
23.61
23.36
22.98
20.23
18.22
18.78
23.74
17.02
16.24
16.16
25.33
22.94
21.31""".split('\n')

mileage = [int(float(m) * 100) for m in mileage_string]

for m in mileage:
    data <<= 12 # We can just shift left by 12 because we know the first element is not 0.
    data |= m & 0xfff

# Test
for i in range(555):
    value = mileage[i]
    data_i = 554 - i
    data_value = (data >> (12 * data_i)) & 0xfff if i != 374 else 5002
    assert value == data_value, f"Error at day w/ index {i}: expected {value}, got {data_value}`"

print(hex(data))
